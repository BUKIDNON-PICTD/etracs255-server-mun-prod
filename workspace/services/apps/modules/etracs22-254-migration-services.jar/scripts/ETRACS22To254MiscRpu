import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import static java.util.Calendar.YEAR;

class ETRACS22To254MiscRpu {
	

 	@ActiveDB('rpu')
    def emrpu

	@ActiveDB('realproperty')
	def emrealproperty

	@ActiveDB('faas')
	def emfaas

	@ActiveDB('planttreerpu')
    def planttreeem


	@PersistenceContext("etracs22")
	def em22; 

    @PersistenceContext('main')
	def main


    @Service('LandRPUService')
    def landRPUSvr

    @Service('RPTUtil')
	def util

	//@Service('RPT22Migration2Service')
	//def rptSvc

	@ActiveDB('etracs254rpt')
	def em254

	def SCHEMA_DETAIL  = 'misc'

	@ProxyMethod
	public def migrateMisc(rpu){
			// println rpu
			if (!rpu.objid){
				rpu.objid = 'RPU' + new java.rmi.server.UID()
			}
			def newmisc = [
				objid 		  : rpu.objid,
				landrpuid     : rpu.landfaas.rpuid,
				actualuse     : [objid:rpu.info.actualuseid],
				
			]
			newmisc.items = getMiscItem(rpu)
			
		return newmisc
	}


	def getMiscItem(rpu){
		def newitems = []
		rpu.info.miscrpuitems.each{mi->
				def newmi = [
					objid           : 'MI' + new java.rmi.server.UID(),
					miscrpuid       : rpu.objid,
					miv_objid       : mi.miscitemvalueid,
					miscitem_objid  : mi.miscitemid,
					expr            : mi.expr,
					depreciation    : mi.depreciation,
					depreciatedvalue: mi.depreciatedvalue,
					basemarketvalue : mi.basemarketvalue,
					marketvalue     : mi.marketvalue,
					assesslevel     : mi.assesslevel,
					assessedvalue   : mi.assessedvalue,
				]
				// planttreeem.create(newpt, 'planttreedetail')
				newmi.params = getMiscItemParams(rpu,mi)
				newitems.push(newmi)
			}
		return newitems
	}

	def getMiscItemParams(rpu,mi){
		def newitems = []
		mi.params.each{x->
			def params = [
					miscrpuitemid: 'MP' + new java.rmi.server.UID(),
					param_objid  : x.paramid,
					miscrpuid    : rpu.objid,
					intvalue     : toInteger(x.paramvalue),
					decimalvalue : toDecimal(x.paramvalue),
			]
			newitems.push(params);

		}
		return newitems
		
	}

	def toInteger(paramvalue){
		if (paramvalue == null) 
			return 0

		try{
			return 
			new java.math.BigDecimal(paramvalue.toString()).intValue()
		}
		catch(e){
			return 0
		}
	}

	def toDecimal(paramvalue){
		if (paramvalue == null) 
			return 0.0

		try{
			return new java.math.BigDecimal(paramvalue.toString())
		}
		catch(e){
			return 0.0 
		}
	}

}

