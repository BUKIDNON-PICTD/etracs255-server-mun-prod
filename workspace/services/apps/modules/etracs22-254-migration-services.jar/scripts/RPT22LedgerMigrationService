import com.rameses.annotations.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;
import java.rmi.server.UID;
import com.rameses.util.*;
import static java.util.Calendar.YEAR;

class RPT22LedgerMigrationService {
	

 	@ActiveDB('rpu')
    def emrpu

	@ActiveDB('realproperty')
	def emrealproperty

	@ActiveDB('faas')
	def emfaas

	@ActiveDB('rptledger') 
    def emrptledger

	@PersistenceContext("etracs22")
	def em22; 

    @PersistenceContext('main')
	def main


    @Service('RPTLedgerService')
    def rptledgerSvr

    @Service('RPTUtil')
	def util

	@Service('RPTBillingService')
    def billingSvc

	def SCHEMA_LEDGER   = 'rptledger'
    def SCHEMA_FAAS     = 'ledgerfaas'
    def SCHEMA_BILLITEM     = 'billitem'
    def SCHEMA_CAPTUREPMT = 'credit'

	@ProxyMethod
	public void migrate(faas){
		initLedger(faas)
	}

	void initLedger(faas){
		def rptledger = em22.sqlContext.createQuery('''
				SELECT
				*
				FROM
				rptledger
				WHERE faasid = $P{objid} 
				''').setParameter('objid',faas.objid).singleResult;
	
		if(rptledger){
			rptledger.state                  = rptledger.docstate
			rptledger.nextbilldate           = null
			rptledger.firstqtrpaidontime	    = util.toBoolean(rptledger.firstqtrpaidontime, true)
			rptledger.qtrlypaymentavailed    = false
			rptledger.qtrlypaymentpaidontime = util.toBoolean(rptledger.quarterlyinstallmentpaidontime, true)
			rptledger.lastreceiptid          = null//getLastReceiptPaid(rptledger.objid)
			rptledger.barangayid             = faas.rp.barangayid
			rptledger.advancebill            = false
			rptledger.lastbilledyear         = 0
			rptledger.lastbilledqtr          = 0
			rptledger.partialbasicdisc       = 0.0
			rptledger.partialsefdisc         = 0.0
			//rptledger.taxpayer_objid       = faas.taxpayer_objid
			//rptledger.owner_name           = faas.owner_name
			rptledger.owner                  = faas.taxpayer
			rptledger.taxpayer               = faas.taxpayer
			rptledger.txntype_objid          = getTxnType(rptledger.txntype).objid
			rptledger.classification_objid   = faas.rpu.classification.objid
			rptledger.classcode              = faas.rpu.classification.code
			rptledger.totalav                = faas.rpu.totalav
			rptledger.totalmv                = faas.rpu.totalmv
			rptledger.totalareaha            = faas.rpu.totalareaha
			rptledger.taxable                = util.toBoolean(faas.rpu.taxable, true)
			rptledger.prevtdno               = faas.prevtdno

			rptledger.faases = createLedgerFaas( rptledger, faas )
			rptledger.payments = createLedgerPayment(rptledger)

			if(rptledger.faases){
				def lastfaas = rptledger.faases.last() 
		        faas.backtaxes?.each{ backtax ->
		            backtax.txntype         = faas.txntype 
		            backtax.rpu             = faas.rpu 
		            backtax.backtaxyrs      = faas.backtaxyrs
		            backtax.taxable         = util.toBoolean(backtax.taxable, true)
		            def ledgerfaas          = createLedgerFaas(rptledger, backtax)
		            ledgerfaas.faasid       = backtax.faasid 
		            ledgerfaas.assessedvalue = backtax.av 
		            ledgerfaas.backtax      = true 
		            ledgerfaas.toyear       = (lastfaas.fromqtr == 1 ? lastfaas.fromyear - 1 : lastfaas.fromyear)
		            ledgerfaas.toqtr        = (lastfaas.fromqtr == 1 ? 4 : lastfaas.fromqtr - 1)
		            rptledger.faases << ledgerfaas 
		            lastfaas = ledgerfaas
		        }
			}
	       

	        emrptledger.create(rptledger)
	        println rptledger.faases
        	rptledger.faases.each{ ledgerfaas ->
            	saveLedgerFaas(ledgerfaas)
       		}

       		rptledger.payments.each{payment ->
   				emrptledger.create(payment, 'credit')
		        emrptledger.updateLastYearQtrPaid(payment)    
		        emrptledger.resetLastBilledInfo(payment)
		      
		        billingSvc.generateBillByLedgerId(payment.rptledgerid)
		       
       		}

       		println  "-> ${rptledger.objid} ledger migrated"

		}
       

	}


	def createLedgerPayment(ledger){

	 	def rptpayments = em22.sqlContext.createQuery('''
				SELECT
				*
				FROM
				rptpayment
				WHERE rptledgerid = $P{objid} 
				''').setParameter('objid',ledger.objid).resultList;
	 	if(rptpayments){
	 		
	 		rptpayments.each{rp->
	 			
				rp.objid            = rp.objid
				rp.rptledgerid      = ledger.objid
				rp.refno            = rp.receiptno
				rp.refdate          = rp.receiptdate
				rp.type             = rp.mode
				rp.payorid          = null
				rp.paidby           = [name:ledger.owner_name, address:"-"]
				rp.collector        = rp.collectorname
				rp.postedby         = (rp.capturedby == null ? rp.collectorname : rp.capturedby)
				rp.postedbytitle    = "ETRACS22"
				rp.dtposted		    = rp.dtposted
				rp.fromyear         = rp.fromyear
				rp.fromqtr          = rp.fromqtr
				rp.toyear           = rp.toyear
				rp.toqtr            = rp.toqtr
				rp.basic            = rp.basic
				rp.basicint         = rp.basicint
				rp.basicdisc        = rp.basicdisc
				rp.basicpartial     = rp.basicpartial
				rp.basicidle	    = 0.0
				rp.sef              = rp.sef
				rp.sefint           = rp.sefint
				rp.sefdisc          = rp.sefdisc
				rp.sefpartial       = rp.sefpartial
				rp.amount           = rp.basic + rp.basicint - rp.basicdisc + rp.sef + rp.sefint - rp.sefdisc
				rp.firecode    	    = 0.0
				rp.collectingagency = rp.collectingagency


		 	}
	        return rptpayments
	 	}

	 	return null
	 	
    }

	def createLedgerFaas(ledger, faas){

	 	def rptledgeritems = em22.sqlContext.createQuery('''
				SELECT
				*
				FROM
				rptledgeritem
				WHERE parentid = $P{objid} 
				''').setParameter('objid',ledger.objid).resultList;
	 	if(rptledgeritems){
	 		rptledgeritems.each{ri->
		 		ri.state = ri.docstate
		 		ri.rptledgerid = ri.parentid
		 		ri.txntype_objid = getTxnType(ri.txntype).objid
		 		ri.classification_objid = getClassification(ri.classcode).objid
		 		ri.actualuse_objid = getClassification(ri.actualusecode).objid
		 		ri.idleland = (faas.rpu.idleland ? 1 : 0)
		 		ri.fromqtr = faas.effectivityqtr
		 		ri.toqtr =  0
		 		ri.backtax = util.toBoolean(ri.backtax, true)
		 		ri.systemcreated = util.toBoolean(ri.systemcreated, true)
		 		ri.taxable = util.toBoolean(ri.taxable, true)
		 	}
	        return rptledgeritems
	 	}

	 	return null
	 	
    }

     @ProxyMethod
    public def saveLedgerFaas(ledgerfaas){
        emrptledger.save(ledgerfaas, SCHEMA_FAAS)
        return ledgerfaas 
    }

    def getTxnType(objid){

		def setting = main.sqlContext.createQuery('''
			SELECT * FROM faas_txntype WHERE objid = $P{objid}
				''').setParameter('objid',objid).singleResult;

		if (setting){
			return setting
		}else {
			throw new Exception("faas_txntype not found ${objid}")
		}
	}

	def getClassification(code){

		def setting = main.sqlContext.createQuery('''
			SELECT * FROM propertyclassification WHERE code = $P{code}
				''').setParameter('code',code).singleResult;

		if (setting){
			return setting
		}else {
			throw new Exception("propertyclassification not found ${code}")
		}
	}

	def getClassificationbyid(objid){

		def setting = main.sqlContext.createQuery('''
			SELECT * FROM propertyclassification WHERE objid = $P{objid}
				''').setParameter('objid',objid).singleResult;

		if (setting){
			return setting
		}else {
			throw new Exception("propertyclassification not found ${objid}")
		}
	}
}

