import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;

class ETRACS22To254LandRpu
{
	@ActiveDB('landrpu')	
	def landrpuEm 

	@ActiveDB('planttreerpu')
	def plantTreeEm 

	@ActiveDB('etracs254rpt')
	def em254

	@ActiveDB(value='etracs22rpt', em='etracs22')
	def em22

	@Service('RPUService')
    def rpuSvc 

	@Service()
	def self 

	// @After(pattern="ETRACS22To254MigrationService.migrateFaas", eval="#{result.rpu.rputype == 'land'}")
	// public void migrateLandRpu(evt){
	// 	def faas22 = evt.result 
	// 	doMigrateLandRpu(faas22.rpu)
	// 	doMigrateLandDetail(faas22.rpu)
	// 	doMigrateLandAdjustments(faas22.rpu.info.adjustments, faas22.rpu.objid, null, 'LV')
	// 	doMigratePlantTrees(faas22.rpu)		
	// 	doMigrateAssessment(faas22.rpu)
	// 	em22.deleteLogById(faas22)
	// 	println 'Land FAAS ' + faas22.objid + ' successfully migrated.'
	// }

	@ProxyMethod
	public def migrateLandRpu(rpu){
		def newrpu = [:]

		if (!rpu.objid){
			rpu.objid = 'RPU' + new java.rmi.server.UID()
		}
		newrpu.objid 					= rpu.objid
		newrpu.idleland                 = toBoolean(rpu.info.idleland, false)
		newrpu.totallandbmv             = (rpu.info.landtotal.basemarketvalue == null ? 0.0 : rpu.info.landtotal.basemarketvalue)
		newrpu.totallandmv              = (rpu.info.landtotal.marketvalue == null ? 0.0 : rpu.info.landtotal.marketvalue)
		newrpu.totallandav              = (rpu.info.landtotal.assessedvalue == null ? 0.0 : rpu.info.landtotal.assessedvalue)
		newrpu.totalplanttreebmv        = (rpu.info.planttotal.basemarketvalue == null ? 0.0 : rpu.info.planttotal.basemarketvalue)
		newrpu.totalplanttreeadjustment = (rpu.info.planttotal.adjustment == null ? 0.0 : rpu.info.planttotal.adjustment)
		newrpu.totalplanttreemv         = (rpu.info.planttotal.marketvalue == null ? 0.0 : rpu.info.planttotal.marketvalue)
		newrpu.totalplanttreeav         = (rpu.info.planttotal.assessedvalue == null ? 0.0 : rpu.info.planttotal.assessedvalue)
		newrpu.landvalueadjustment      = (rpu.info.landvalueadjustment == null ? 0.0 : rpu.info.landvalueadjustment)
		newrpu.publicland               = false
		newrpu.landadjustments          = getMigrateLandAdjustments(newrpu.totallandbmv,newrpu.totallandmv ,rpu.info.adjustments, rpu.objid, null, 'LV')
		newrpu.landdetails              = getMigrateLandDetail(rpu)
		newrpu.plattrees                = getMigratePlantTrees(rpu)	
		return newrpu
	}

	def getMigrateLandDetail(rpu){
		def landdetails = []
		rpu.info.landdetails.each{ld ->
			if (existLandDetail(ld)){
				ld.objid ='LD' + new java.rmi.server.UID();
			}
				def newld = [
					objid              : ld.objid, 
					landrpuid          : rpu.objid, 
					subclass           : [objid:ld.subclassid],
					specificclass      : [objid:ld.specificclassid], 
					actualuse          : [objid:ld.assesslevelid], 
					stripping          : [objid:ld.strippingid], 
					addlinfo           : ld.addlinfo, 
					striprate          : (ld.striprate == null ? 0.0 : ld.striprate), 
					areatype           : ld.areatype, 
					area               : ld.area, 
					areasqm            : ld.areasqm, 
					areaha             : ld.areaha, 
					basevalue          : ld.basevalue, 
					unitvalue          : ld.unitvalue, 
					taxable            : toBoolean(ld.taxable, true), 
					basemarketvalue    : ld.basemarketvalue, 
					adjustment         : ld.adjustment, 
					landvalueadjustment: ld.landvalueadjustment, 
					actualuseadjustment: ld.actualuseadjustment, 
					marketvalue        : ld.marketvalue, 
					assesslevel        : ld.assesslevel, 
					assessedvalue      : ld.assessedvalue, 
				]
				//landrpuEm.create(newld, 'landdetail')
				newld.actualuseadjustments = getMigrateLandAdjustments(newld.basemarketvalue,newld.marketvalue,ld.landadjustments, null, rpu.objid, 'AU')
				landdetails.push(newld)
				
			// }
		}

		return landdetails
	}

	def getMigrateLandAdjustments(basemarketvalue,marketvalue,adjustments, landrpuid, landdetailid, type){
		def adjs = []
		adjustments.each{adj ->
			if (existLandAdjustment(adj)){
				adj.objid = 'LA' + new java.rmi.server.UID();
			}	
				def newadj = createAdjustment(adj, type)
				newadj.landrpuid = landrpuid 
				newadj.landdetailid = landdetailid 
				newadj.basemarketvalue =  basemarketvalue
				newadj.marketvalue = marketvalue
				newadj.params = getMigrateAdjustmentParams(adj, newadj)
				adjs.push(newadj)
				
			
		}
		return adjs
	}

	def getMigrateAdjustmentParams(adj, newadj){
		def params = []
		adj.params.each{p ->
			// if (!existAdjustmentParam(adj, p)){
				def newparam = [
					objid 				: 'PARAM' + new java.rmi.server.UID(),
					landadjustmentid 	: adj.objid, 
					landrpuid 			: adj.landrpuid == null ? newadj.landrpuid : adj.landrpuid, 
					param 				: [objid:p.paramid],
					value 				: p.paramvalue,
				]
				
				params.push(newparam);
			// }
		}
		return params
	}

	def getMigratePlantTrees(rpu){
		def planttrees = []
		rpu.info.planttrees.each{pt->
			if (!existPlantTreeDetail(pt)){
				def newpt = [
					objid 				: pt.objid,
					planttreerpuid 		: null,
					landrpuid 			: rpu.objid,
					planttreeunitvalue  : [objid:pt.unitvalueid],
					planttree  			: [objid:pt.planttreeid],
					actualuse  			: [objid:pt.assesslevelid],
					productive 			: pt.bearing + 0.0,
					nonproductive 		: pt.nonbearing + 0.0,
					nonproductiveage 	: pt.nonbearingage,
					unitvalue 			: pt.unitvalue,
					basemarketvalue 	: pt.basemarketvalue,
					adjustment 			: pt.adjustment,
					adjustmentrate 		: pt.adjustmentrate,
					marketvalue 		: pt.marketvalue,
					assesslevel 		: pt.assesslevel,
					assessedvalue 		: pt.assessedvalue,
					areacovered 		: 0.0,
				]
				planttrees.push(newpt)
			}
		}
		return planttrees
	}

	void doMigrateAssessment(rpu){
		em254.getLandRpuAssessments(rpu).each{
			if (!existRpuAssessment(it)){
				it.classification_objid = it.classification.objid 
				it.actualuse_objid = it.actualuse.objid 
				em254.insertLandRpuAssessment(it)
			}
		}

		em254.getPlantTreeDetailAssessments(rpu).each{
			if (!existRpuAssessment(it)){
				it.classification_objid = it.classification.objid 
				it.actualuse_objid = it.actualuse.objid 
				em254.insertLandRpuAssessment(it)
			}	
		}
	}


	boolean existLandRpu(rpu){
		return em254.findLandRpuById(rpu) != null 
	}


	boolean existLandDetail(ld){
		return em254.findLandDetailById(ld) != null 
	}

	def createAdjustment(adj, type){
		return [
			objid 			: adj.objid,
			adjustmenttype  : [objid:adj.adjtypeid],
			expr 			: adj.expr,
			adjustment 		: adj.adjustment,
			type 			: type, 
		]
	}

	boolean existLandAdjustment(adj){
		return em254.findLandAdjustmentById(adj) != null 
	}

	boolean existAdjustmentParam(adj, p){
		return em254.findLandAdjustmentById([objid:p.paramid]) != null 
	}

	boolean existPlantTreeDetail(pt){
		return em254.findPlantTreeDetailById(pt) != null
	}

	boolean existRpuAssessment(assessment){
		return em254.findRpuAssessmentById(assessment) != null 
	}

	boolean toBoolean(val, defaultvalue ){
		if (val == null)
			return defaultvalue
		if (val instanceof Boolean)
			return val 
		return val.toString().toLowerCase().matches('y|yes|t|true|1')
	}

}
