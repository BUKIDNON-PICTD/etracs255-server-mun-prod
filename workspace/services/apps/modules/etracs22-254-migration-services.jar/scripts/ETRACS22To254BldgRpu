import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;

class ETRACS22To254BldgRpu
{
	@ActiveDB('bldgrpu')	
	def rpuEm 

	@ActiveDB('etracs254rpt')
	def em254

	@ActiveDB(value='etracs22rpt', em='etracs22')
	def em22

	

	@ProxyMethod
	public def migrateBldgRpu(rpu){
		def newrpu = [:]

		if (!rpu.objid){
			rpu.objid = 'RPU' + new java.rmi.server.UID()
		}
		// if (!existBldgRpu(rpu)){
		newrpu = getMigrateBldgRpu(rpu)
		newrpu.structures = getMigrateBldgStructures(rpu)
		newrpu.structuraltypes = []
		newrpu.structuraltypes.push(getMigrateBldgStructuralTypes(rpu))
		// doMigrateAssessment(faas22.rpu)
		// doUpdateBldgRpuInfo(faas22.rpu)
		// em22.deleteLogById(faas22)
		// println 'Bldg FAAS ' + faas22.objid + ' successfully migrated.'
		// println newrpu
		return newrpu
		// }
		// return rpu
	}

	def getMigrateBldgRpu(rpu){
		// println rpu
			def newrpu = [
				objid            : rpu.objid,
				landrpuid        : rpu.landfaas.rpuid,
				houseno          : rpu.info.houseno,
				psic             : rpu.info.psic,
				permitno         : rpu.info.permitno,
				permitdate       : rpu.info.permitdate,
				permitissuedby   : rpu.info.permitissuedby,
				bldgtype         : [objid:rpu.info.bldgtype.bldgtypeid],
				bldgkindbucc     : [objid:rpu.info.bldgkindbucc.bldgkindbuccid],
				basevalue        : rpu.info.firstfloorbasevalue,
				dtcompleted      : rpu.info.dtcompleted,
				dtoccupied       : rpu.info.dtoccupied,
				floorcount       : 0,
				depreciation     : rpu.info.depreciation,
				depreciationvalue: rpu.info.depreciationvalue,
				totaladjustment  : rpu.info.totaladjustment,
				additionalinfo   : rpu.info.additionalinfo,
				bldgage          : rpu.info.bldgage,
				effectiveage     : rpu.info.bldgage,
				percentcompleted : 100,
				bldgassesslevel  : [objid:rpu.info.assesslevelid],
				assesslevel      : rpu.info.assesslevel,
				condominium      : toBoolean(rpu.info.condominium, false),
				bldgclass        : rpu.info.bldgclass,
				predominant      : 0, 
				condocerttitle   : null,
				dtcertcompletion : null,
				dtcertoccupancy  : null,
			]
			return newrpu
	}

	boolean existBldgRpu(rpu){
		return em254.findBldgRpuById(rpu) != null 
	}

	def getMigrateBldgStructures(rpu){
		def bldgstructures = []
		
		rpu.bldgstructures.each{
			if (existBldgStructure(it)){
				it.objid = 'BS' + new java.rmi.server.UID()
			}
				def newstructure = [
					objid 		: it.objid,
					bldgrpuid 	: rpu.objid, 
					floor 		: 1, 
					structure   : [objid:it.structureid],
					material    : null, 
				]
				if (it?.materialid){
					newstructure.material = [objid:it.materialid]
				}
				// rpuEm.create(newstructure, 'structure')

				bldgstructures.push(newstructure)

			// }
		}	

		return bldgstructures
	}

	boolean existBldgStructure(structure){
		return em254.findBldgStructureById(structure) != null 
	}

	def getMigrateBldgStructuralTypes(rpu){
			// if (existBldgStructuralType(rpu)){
			// 	rpu.st.objid = 'ST' + new java.rmi.server.UID()
			// }
			def newst = [
				objid 			: 'ST' + new java.rmi.server.UID(),
				bldgrpuid 		: rpu.objid,
				classification  : [objid:rpu.classid],
				bldgtype 		: [objid:rpu.info.bldgtype.bldgtypeid],
				bldgkindbucc 	: [objid:rpu.info.bldgkindbucc.bldgkindbuccid],
				floorcount 		: rpu.info.floorcount,
				basefloorarea 	: rpu.info.totalarea,
				totalfloorarea  : rpu.info.totalarea,
				basevalue  		: rpu.info.firstfloorbasevalue,
				unitvalue	    : rpu.info.firstfloorbasevalue,
			]
			// rpuEm.create(newst, 'structuraltype')
			
			newst.bldguses = getMigrateBldgUses(rpu, newst.objid)
			return newst
			
		// }
	}

	boolean existBldgStructuralType(rpu){
		return em254.findBldgStructuralTypeById(rpu) != null
	}


	def getMigrateBldgUses(rpu, stobjid){
		def bldguses = []
		rpu.info.bldguses.each{bu->
			if (existBldgUse(bu)){
				bu.objid = 'BU' + new java.rmi.server.UID()
			}
				def newbu = [
					objid            : bu.objid,
					bldgrpuid        : rpu.objid,
					structuraltype   : [objid:stobjid],
					actualuse        : [objid:bu.actualuse.actualuseid],
					basevalue        : rpu.info.firstfloorbasevalue,
					area             : bu.area,
					basemarketvalue  : bu.basemarketvalue,
					depreciationvalue: bu.depreciationvalue,
					adjustment       : bu.adjustment,
					marketvalue      : bu.marketvalue,
					assesslevel      : bu.assesslevel,
					assessedvalue    : bu.assessedvalue,
				]

				// rpuEm.create(newbu, 'bldguse')
				newbu.floors = getMigrateFloors(rpu, bu)

				bldguses.push(newbu)
			// }
		}
		return bldguses
	}


	boolean existBldgUse(bu){
		return em254.findBldgUseById(bu) != null 
	}

	def getMigrateFloors(rpu, bu){
		def bldgfloors = []
		bu.floors.each{floor->
			if (existFloor(floor)){
				floor.objid = 'FL' + new java.rmi.server.UID()
			}
				def newfloor = [
					objid          : floor.objid,
					bldguseid      : bu.objid,
					bldgrpuid      : rpu.objid,
					floorno        : floor.floorno,
					area           : floor.area,
					storeyrate     : floor.storeyrate,
					basevalue      : floor.basevalue,
					unitvalue      : floor.unitvalue,
					basemarketvalue: floor.basemarketvalue,
					adjustment     : floor.adjustment,
					marketvalue    : floor.marketvalue,
				]

				// rpuEm.create(newfloor, 'floor')
				newfloor.additionals = getMigrateAdditionalItems(rpu, floor)

				bldgfloors.push(newfloor)
			// }
		}
		return bldgfloors
	}

	boolean existFloor(floor){
		return em254.findFloorById(floor) != null
	}

	def getMigrateAdditionalItems(rpu, floor){
		def bldgadditionalitems = []
		floor.additionalitems.each{item ->
			if (existBldgAdditionalItem(item)){
				item.objid = 'BI' + new java.rmi.server.UID()
			}
				def newitem = [
					objid         : item.objid,
					bldgfloorid   : floor.objid,
					bldgrpuid     : rpu.objid,
					additionalitem: [objid:item.addlitemid],
					amount        : item.amount,
					expr          : item.expr,
					depreciate    : true,
				]

				// rpuEm.create(newitem, 'additional')
				newitem.params = getMigrateAdditionalParams(rpu, item)
				bldgadditionalitems.push(newitem)
			// }
		}
		return bldgadditionalitems
		
	}

	boolean existBldgAdditionalItem(item){
		return em254.findBldgAdditionalItemById(item) != null 
	}


	def getMigrateAdditionalParams(rpu, item){
		def params = []
		item.params.each{param ->
			def objid = item.objid + param.addlitemcode
			// if (!existBldgAdditionalItemParam([objid:objid])){

				// def rptparam = em254.findRptParameterById([objid:param.paramid])
				
				// if (!rptparam)
				// throw new Exception('Parameter ' + param.paramname + ' does not exist.')

				def newparam = [
					objid 					: objid,
					bldgflooradditionalid 	: item.objid,
					bldgrpuid 				: rpu.objid,
					param 					: [objid:param.paramid],
					intvalue 				: toInteger(param.paramvalue),
					decimalvalue 			: toDecimal(param.paramvalue),
				]
				//rpuEm.create(newparam, 'param')
				params.push(newparam)
			// }
		}
		
		return params
	}

	boolean existBldgAdditionalItemParam(param){
		return em254.findBldgAdditionalItemParamById(param) != null
	}

	void doUpdateBldgRpuInfo(rpu){
		em254.updateBldgRpuFloorCount(rpu)
		em254.updateStructuralTypeBaseArea(rpu)
	}


	def toInteger(paramvalue){
		if (paramvalue == null) 
			return 0

		try{
			return 
			new java.math.BigDecimal(paramvalue.toString()).intValue()
		}
		catch(e){
			return 0
		}
	}

	def toDecimal(paramvalue){
		if (paramvalue == null) 
			return 0.0

		try{
			return new java.math.BigDecimal(paramvalue.toString())
		}
		catch(e){
			return 0.0 
		}
	}

	boolean toBoolean(val, defaultvalue ){
		if (val == null)
			return defaultvalue
		if (val instanceof Boolean)
			return val 
		return val.toString().toLowerCase().matches('y|yes|t|true|1')
	}

	void doMigrateAssessment(rpu){
		em254.insertBldgRpuAssessment(rpu)
	}

}
