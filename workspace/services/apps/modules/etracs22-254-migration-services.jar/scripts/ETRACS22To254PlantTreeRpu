import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import static java.util.Calendar.YEAR;

class ETRACS22To254PlantTreeRpu {
	

 	@ActiveDB('rpu')
    def emrpu

	@ActiveDB('realproperty')
	def emrealproperty

	@ActiveDB('faas')
	def emfaas

	@ActiveDB('planttreerpu')
    def planttreeem


	@PersistenceContext("etracs22")
	def em22; 

    @PersistenceContext('main')
	def main


    @Service('LandRPUService')
    def landRPUSvr

    @Service('RPTUtil')
	def util

	//@Service('RPT22Migration2Service')
	//def rptSvc

	@ActiveDB('etracs254rpt')
	def em254

	def SCHEMA_DETAIL  = 'planttreedetail'

	@ProxyMethod
	public def migratePlantTree(rpu){
			def newpt = [
				objid 		  : rpu.objid,
				landrpuid     : rpu.landfaas.rpuid,
				productive    : new BigDecimal(rpu.info.totalbearing),
				nonproductive : new BigDecimal(rpu.info.totalnonbearing),
			]
			newpt.planttrees = getMigratePlantTrees(rpu)
		return newpt
		// println 'PlantTree FAAS ' + faas22.objid + ' successfully migrated.'
	}

	// def getMigratePlantTreeRpu(faas){
	// 	def ptrpu = [
	// 		objid 		  : rpu.objid,
	// 		landrpuid     : getLandRpu(faas.info.landfaasid).rpuid,
	// 		productive    : new BigDecimal(faas.rpu.info.totalbearing),
	// 		nonproductive : new BigDecimal(faas.rpu.info.totalnonbearing),
	// 	]
	// 	planttreeem.create(ptrpu)

	// 	doMigratePlantTrees(faas.rpu)
		
	// }

	def getLandRpu(faasid){

		def setting = main.sqlContext.createQuery('''
			SELECT * FROM faas
			WHERE objid = $P{objid}
			''').setParameter('objid',faasid).singleResult;

		if (setting){
			return setting
		}else {
			//try{
			//	return rptSvc.startMigration(faasid)
			//}catch(e){
			//	throw new Exception("no land faas with id ${faasid}")
			//}
			
		}
	}

	def getMigratePlantTrees(rpu){
		def ptitem = []
		rpu.info.planttreedetails.each{pt->
			if (!existPlantTreeDetail(pt)){
				// println 'Migrating planttreedetail ' + pt.objid
				def newpt = [
					objid 				: pt.objid,
					planttreerpuid 		: rpu.objid,
					landrpuid 			: rpu.landfaas.rpuid,
					planttreeunitvalue  : [objid:pt.unitvalueid],
					planttree  			: [objid:pt.planttreeid],
					actualuse  			: [objid:pt.assesslevelid],
					productive 			: pt.bearing + 0.0,
					nonproductive 		: pt.nonbearing + 0.0,
					nonproductiveage 	: pt.nonbearingage,
					unitvalue 			: pt.unitvalue,
					basemarketvalue 	: pt.basemarketvalue,
					adjustment 			: pt.adjustment,
					adjustmentrate 		: pt.adjustmentrate,
					marketvalue 		: pt.marketvalue,
					assesslevel 		: pt.assesslevel,
					assessedvalue 		: pt.assessedvalue,
					areacovered 		: 0.0,
				]
				// planttreeem.create(newpt, 'planttreedetail')
				ptitem.push(newpt)
			}
		}
		return ptitem
	}

	boolean existPlantTreeDetail(pt){
		return em254.findPlantTreeDetailById(pt) != null
	}

	def getPlantTreeUnitValue(code){

		def setting = main.sqlContext.createQuery('''
			SELECT * FROM planttreeunitvalue
			WHERE code = $P{code}
			''').setParameter('code',code).singleResult;

		if (setting){
			return setting
		}else {
			throw new Exception("planttreeunitvalue not found ${code}")
		}
	}

	def getPlantTree(code){

		def setting = main.sqlContext.createQuery('''
			SELECT * FROM planttree
			WHERE code = $P{code}
			''').setParameter('code',code).singleResult;

		if (setting){
			return setting
		}else {
			throw new Exception("planttree not found ${code}")
		}
	}

	def getPlantTreeActualUse(code){

		def setting = main.sqlContext.createQuery('''
			SELECT * FROM planttreeassesslevel
			WHERE code = $P{code}
			''').setParameter('code',code).singleResult;

		if (setting){
			return setting
		}else {
			throw new Exception("planttreeassesslevel not found ${code}")
		}
	}
}

